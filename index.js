#!/usr/bin/env node
"use strict";var _random2=require("lodash/random"),_random3=_interopRequireDefault(_random2),_commander=require("commander"),_commander2=_interopRequireDefault(_commander),_ws=require("ws"),_ws2=_interopRequireDefault(_ws),_chalk=require("chalk"),_chalk2=_interopRequireDefault(_chalk),_moment=require("moment"),_moment2=_interopRequireDefault(_moment),_numeral=require("numeral"),_numeral2=_interopRequireDefault(_numeral);function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _toArray(a){return Array.isArray(a)?a:Array.from(a)}require("numeral/locales/de"),_commander2.default.description("Very basic WebSocket that simulates the Deepbot API").option("-k, --api-key [api-key]","API key used to give access","1234").option("-p, --port [port]","Port the WebSocket listens to",Number,3337).option("-w, --no-color","Port the WebSocket listens to").option("-n, --no-users","Keep the initial user database empty").option("-a, --auth-all","Automatically authenticate new clients").option("-r, --randomLatency [latency]","Adds response latencies from 0 to [latency] ms",Number).parse(process.argv),_chalk2.default.enabled=!_commander2.default.noColor;var server,userData=_commander2.default.noUsers?{}:{j4idn:{user:"j4idn",points:13.37,watchtime:9412,vip:10,mod:5,join_date:(0,_moment2.default)().subtract(7,"days").valueOf(),last_seen:(0,_moment2.default)().valueOf(),vip_expiry:(0,_moment2.default)().add(30,"days").valueOf()}};try{server=new _ws2.default.Server({port:_commander2.default.port})}catch(a){console.error(a),process.exit(1)}server.on("connection",function(a,b){var c=_commander2.default.authAll,d=b.connection.remoteAddress;console.log(_chalk2.default.green("["+d+"] Connected!")),a.on("message",function(b){var e=b.split("|"),f=_toArray(e),g=f[0],h=f[1],i=f.slice(2);console.log(_chalk2.default.blue("["+d+"] \uD83E\uDC7A "+JSON.stringify({apiName:g,command:h,args:i}))),new Promise(function(a){setTimeout(a,(0,_random3.default)(0,_commander2.default.randomLatency))}).then(function(){return resolveApiCall(c,g,h,i)}).then(function(b){console.log(_chalk2.default.gray("["+d+"] \uD83E\uDC78 "+JSON.stringify(b))),a.send(JSON.stringify(b,null,4))}).catch(function(a){return console.log(_chalk2.default.gray("["+d+"] \u26A0 "+a))})}),a.on("close",function(){console.log(_chalk2.default.red("["+d+"] Disconnected!"))})}),console.log(_chalk2.default.yellow("Deepbot API WebSocket running on ws://127.0.0.1:"+_commander2.default.port)),_commander2.default.authAll?console.log(_chalk2.default.yellow("--auth-all is enabled")):console.log(_chalk2.default.yellow("You can log in with api|register|"+_commander2.default.apiKey)),process.stdin.setEncoding("utf8"),process.stdin.on("readable",function(){var a=process.stdin.read()});function resolveApiCall(a,b,c,d){return new Promise(function(e,f){if("api"!==b)return void f("First parameter must be \"api\", but it is "+b);if(!c)return void f("command is "+c);if("register"===c)return d[0]===_commander2.default.apiKey?e({function:"register",param:"register",msg:"success"}):e({function:"register",param:"error",msg:"incorrect api secret"}),void(a=!0);if(!a)return void e({function:c,param:"error",msg:"not authorized"});if("get_user"===c){var g=userData[d[0]];return void(g?e({function:c,param:d[0],msg:userToJson(g)}):f("User "+d[0]+" not found!"))}if("get_points"===c){var h=userData[d[0]];return void(h?(_numeral2.default.locale("de"),e({function:c,param:d[0],msg:(0,_numeral2.default)(h.points).format("0.00")}),_numeral2.default.locale("en")):f("User "+d[0]+" not found!"))}if("add_points"===c){var i=userData[d[0]],j=d[1];if(i){if(!j)return void f("Missing parameter!");i.points+=j,e({function:c,param:d[0],msg:"success"})}else f("User "+d[0]+" not found!")}})}function userToJson(a){return{user:a.user,points:(0,_numeral2.default)(a.points).format("0.0"),watchtime:(0,_numeral2.default)(a.watchtime).format("0.0"),vip:a.vip,mod:a.mod,join_date:(0,_moment2.default)(a.join_date).format(),last_seen:(0,_moment2.default)(a.last_seen).format(),vip_expiry:(0,_moment2.default)(a.vip_expiry).format()}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
